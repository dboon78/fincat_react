//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from "axios";
import type {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken,
} from "axios";

export interface IClient {
  /**
   * @param body (optional)
   * @return OK
   */
  register(
    body?: RegisterDto | undefined
  ): Promise<SwaggerResponse<NewUserDto>>;
  /**
   * @param body (optional)
   * @return OK
   */
  login(body?: LoginDto | undefined): Promise<SwaggerResponse<void>>;
  /**
   * @param body (optional)
   * @return OK
   */
  forgotPassword(
    body?: ForgotPasswordDto | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @param body (optional)
   * @return OK
   */
  resetPassword(
    body?: ResetPasswordDto | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @param body (optional)
   * @return OK
   */
  commentPOST(
    symbol: string,
    body?: CreateCommentRequestDto | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @param symbol (optional)
   * @param isDescending (optional)
   * @return OK
   */
  commentGET(
    symbol?: string | undefined,
    isDescending?: boolean | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @param body (optional)
   * @return OK
   */
  commentPUT(
    id: number,
    body?: UpdateCommentRequestDto | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @return OK
   */
  commentGET2(id: number): Promise<SwaggerResponse<void>>;
  /**
   * @return OK
   */
  commentDELETE(id: number): Promise<SwaggerResponse<void>>;
  /**
   * @param endpoint (optional)
   * @return OK
   */
  relay(endpoint?: string | undefined): Promise<SwaggerResponse<void>>;
  /**
   * @param query (optional)
   * @return OK
   */
  search(query?: string | undefined): Promise<SwaggerResponse<void>>;
  /**
   * @param body (optional)
   * @return OK
   */
  googleAuth(
    body?: GoogleAuthRequest | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @return OK
   */
  holdingGET(): Promise<SwaggerResponse<void>>;
  /**
   * @param body (optional)
   * @return OK
   */
  holdingPOST(
    body?: CreateHoldingRequest | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @param body (optional)
   * @return OK
   */
  holdingPUT(
    body?: UpdateHoldingRequest | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @return OK
   */
  holdingDELETE(holdingId: number): Promise<SwaggerResponse<void>>;
  /**
   * @return OK
   */
  portfolioGET(): Promise<SwaggerResponse<void>>;
  /**
   * @param id (optional)
   * @return OK
   */
  portfolioDELETE(id?: number | undefined): Promise<SwaggerResponse<void>>;
  /**
   * @param name (optional)
   * @return OK
   */
  portfolioPOST(name?: string | undefined): Promise<SwaggerResponse<void>>;
  /**
   * @param symbol (optional)
   * @param companyName (optional)
   * @param sortBy (optional)
   * @param isDescending (optional)
   * @param pageNumber (optional)
   * @param pageSize (optional)
   * @return OK
   */
  stock(
    symbol?: string | undefined,
    companyName?: string | undefined,
    sortBy?: string | undefined,
    isDescending?: boolean | undefined,
    pageNumber?: number | undefined,
    pageSize?: number | undefined
  ): Promise<SwaggerResponse<void>>;
  /**
   * @return OK
   */
  stock2(id: number): Promise<SwaggerResponse<void>>;
  /**
   * @return OK
   */
  exchanges(): Promise<SwaggerResponse<void>>;
  /**
   * @param period (optional)
   * @return OK
   */
  history(
    id: number,
    period?: string | undefined
  ): Promise<SwaggerResponse<void>>;
}

export class Client implements IClient {
  protected instance: AxiosInstance;
  protected baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance || axios.create();

    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param body (optional)
   * @return OK
   */
  register(
    body?: RegisterDto | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<NewUserDto>> {
    let url_ = this.baseUrl + "/api/account/register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
        Accept: "text/plain",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRegister(_response);
      });
  }

  protected processRegister(
    response: AxiosResponse
  ): Promise<SwaggerResponse<NewUserDto>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 500) {
      const _responseText = response.data;
      return throwException(
        "Internal Server Error",
        status,
        _responseText,
        _headers
      );
    } else if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = NewUserDto.fromJS(resultData200);
      return Promise.resolve<SwaggerResponse<NewUserDto>>(
        new SwaggerResponse<NewUserDto>(status, _headers, result200)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<NewUserDto>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param body (optional)
   * @return OK
   */
  login(
    body?: LoginDto | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/account/login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processLogin(_response);
      });
  }

  protected processLogin(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param body (optional)
   * @return OK
   */
  forgotPassword(
    body?: ForgotPasswordDto | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/account/forgot-password";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processForgotPassword(_response);
      });
  }

  protected processForgotPassword(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param body (optional)
   * @return OK
   */
  resetPassword(
    body?: ResetPasswordDto | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/account/reset-password";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processResetPassword(_response);
      });
  }

  protected processResetPassword(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param body (optional)
   * @return OK
   */
  commentPOST(
    symbol: string,
    body?: CreateCommentRequestDto | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/comment/{symbol}";
    if (symbol === undefined || symbol === null)
      throw new Error("The parameter 'symbol' must be defined.");
    url_ = url_.replace("{symbol}", encodeURIComponent("" + symbol));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCommentPOST(_response);
      });
  }

  protected processCommentPOST(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param symbol (optional)
   * @param isDescending (optional)
   * @return OK
   */
  commentGET(
    symbol?: string | undefined,
    isDescending?: boolean | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/comment?";
    if (symbol === null)
      throw new Error("The parameter 'symbol' cannot be null.");
    else if (symbol !== undefined)
      url_ += "Symbol=" + encodeURIComponent("" + symbol) + "&";
    if (isDescending === null)
      throw new Error("The parameter 'isDescending' cannot be null.");
    else if (isDescending !== undefined)
      url_ += "IsDescending=" + encodeURIComponent("" + isDescending) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCommentGET(_response);
      });
  }

  protected processCommentGET(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param body (optional)
   * @return OK
   */
  commentPUT(
    id: number,
    body?: UpdateCommentRequestDto | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/comment/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCommentPUT(_response);
      });
  }

  protected processCommentPUT(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @return OK
   */
  commentGET2(
    id: number,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/comment/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCommentGET2(_response);
      });
  }

  protected processCommentGET2(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @return OK
   */
  commentDELETE(
    id: number,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/comment/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processCommentDELETE(_response);
      });
  }

  protected processCommentDELETE(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param endpoint (optional)
   * @return OK
   */
  relay(
    endpoint?: string | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/fmp/relay?";
    if (endpoint === null)
      throw new Error("The parameter 'endpoint' cannot be null.");
    else if (endpoint !== undefined)
      url_ += "endpoint=" + encodeURIComponent("" + endpoint) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processRelay(_response);
      });
  }

  protected processRelay(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param query (optional)
   * @return OK
   */
  search(
    query?: string | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/fmp/search?";
    if (query === null)
      throw new Error("The parameter 'query' cannot be null.");
    else if (query !== undefined)
      url_ += "query=" + encodeURIComponent("" + query) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processSearch(_response);
      });
  }

  protected processSearch(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param body (optional)
   * @return OK
   */
  googleAuth(
    body?: GoogleAuthRequest | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/google-auth";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processGoogleAuth(_response);
      });
  }

  protected processGoogleAuth(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @return OK
   */
  holdingGET(cancelToken?: CancelToken): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/holding";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processHoldingGET(_response);
      });
  }

  protected processHoldingGET(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param body (optional)
   * @return OK
   */
  holdingPOST(
    body?: CreateHoldingRequest | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/holding";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processHoldingPOST(_response);
      });
  }

  protected processHoldingPOST(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param body (optional)
   * @return OK
   */
  holdingPUT(
    body?: UpdateHoldingRequest | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/holding";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
      data: content_,
      method: "PUT",
      url: url_,
      headers: {
        "Content-Type": "application/json-patch+json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processHoldingPUT(_response);
      });
  }

  protected processHoldingPUT(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @return OK
   */
  holdingDELETE(
    holdingId: number,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/holding/{holdingId}";
    if (holdingId === undefined || holdingId === null)
      throw new Error("The parameter 'holdingId' must be defined.");
    url_ = url_.replace("{holdingId}", encodeURIComponent("" + holdingId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processHoldingDELETE(_response);
      });
  }

  protected processHoldingDELETE(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @return OK
   */
  portfolioGET(cancelToken?: CancelToken): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/portfolio";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processPortfolioGET(_response);
      });
  }

  protected processPortfolioGET(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param id (optional)
   * @return OK
   */
  portfolioDELETE(
    id?: number | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/portfolio?";
    if (id === null) throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "DELETE",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processPortfolioDELETE(_response);
      });
  }

  protected processPortfolioDELETE(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param name (optional)
   * @return OK
   */
  portfolioPOST(
    name?: string | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/portfolio?";
    if (name === null) throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined)
      url_ += "name=" + encodeURIComponent("" + name) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "POST",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processPortfolioPOST(_response);
      });
  }

  protected processPortfolioPOST(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param symbol (optional)
   * @param companyName (optional)
   * @param sortBy (optional)
   * @param isDescending (optional)
   * @param pageNumber (optional)
   * @param pageSize (optional)
   * @return OK
   */
  stock(
    symbol?: string | undefined,
    companyName?: string | undefined,
    sortBy?: string | undefined,
    isDescending?: boolean | undefined,
    pageNumber?: number | undefined,
    pageSize?: number | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/stock?";
    if (symbol === null)
      throw new Error("The parameter 'symbol' cannot be null.");
    else if (symbol !== undefined)
      url_ += "Symbol=" + encodeURIComponent("" + symbol) + "&";
    if (companyName === null)
      throw new Error("The parameter 'companyName' cannot be null.");
    else if (companyName !== undefined)
      url_ += "CompanyName=" + encodeURIComponent("" + companyName) + "&";
    if (sortBy === null)
      throw new Error("The parameter 'sortBy' cannot be null.");
    else if (sortBy !== undefined)
      url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
    if (isDescending === null)
      throw new Error("The parameter 'isDescending' cannot be null.");
    else if (isDescending !== undefined)
      url_ += "IsDescending=" + encodeURIComponent("" + isDescending) + "&";
    if (pageNumber === null)
      throw new Error("The parameter 'pageNumber' cannot be null.");
    else if (pageNumber !== undefined)
      url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processStock(_response);
      });
  }

  protected processStock(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @return OK
   */
  stock2(
    id: number,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/stock/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processStock2(_response);
      });
  }

  protected processStock2(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @return OK
   */
  exchanges(cancelToken?: CancelToken): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/stock/exchanges";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processExchanges(_response);
      });
  }

  protected processExchanges(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }

  /**
   * @param period (optional)
   * @return OK
   */
  history(
    id: number,
    period?: string | undefined,
    cancelToken?: CancelToken
  ): Promise<SwaggerResponse<void>> {
    let url_ = this.baseUrl + "/api/stock/history/{id}?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (period === null)
      throw new Error("The parameter 'period' cannot be null.");
    else if (period !== undefined)
      url_ += "period=" + encodeURIComponent("" + period) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
      method: "GET",
      url: url_,
      headers: {},
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processHistory(_response);
      });
  }

  protected processHistory(
    response: AxiosResponse
  ): Promise<SwaggerResponse<void>> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (const k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      return Promise.resolve<SwaggerResponse<void>>(
        new SwaggerResponse<void>(status, _headers, null as any)
      );
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<SwaggerResponse<void>>(
      new SwaggerResponse(status, _headers, null as any)
    );
  }
}

export class CreateCommentRequestDto implements ICreateCommentRequestDto {
  title!: string;
  content!: string;
  isCrypto?: boolean;

  constructor(data?: ICreateCommentRequestDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data["title"];
      this.content = _data["content"];
      this.isCrypto = _data["isCrypto"];
    }
  }

  static fromJS(data: any): CreateCommentRequestDto {
    data = typeof data === "object" ? data : {};
    let result = new CreateCommentRequestDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["title"] = this.title;
    data["content"] = this.content;
    data["isCrypto"] = this.isCrypto;
    return data;
  }
}

export interface ICreateCommentRequestDto {
  title: string;
  content: string;
  isCrypto?: boolean;
}

export class CreateHoldingRequest implements ICreateHoldingRequest {
  symbol!: string;
  portfolioId!: number;
  isCrypto?: boolean;

  constructor(data?: ICreateHoldingRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.symbol = _data["symbol"];
      this.portfolioId = _data["portfolioId"];
      this.isCrypto = _data["isCrypto"];
    }
  }

  static fromJS(data: any): CreateHoldingRequest {
    data = typeof data === "object" ? data : {};
    let result = new CreateHoldingRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["symbol"] = this.symbol;
    data["portfolioId"] = this.portfolioId;
    data["isCrypto"] = this.isCrypto;
    return data;
  }
}

export interface ICreateHoldingRequest {
  symbol: string;
  portfolioId: number;
  isCrypto?: boolean;
}

export class ForgotPasswordDto implements IForgotPasswordDto {
  email?: string | undefined;

  constructor(data?: IForgotPasswordDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data["email"];
    }
  }

  static fromJS(data: any): ForgotPasswordDto {
    data = typeof data === "object" ? data : {};
    let result = new ForgotPasswordDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["email"] = this.email;
    return data;
  }
}

export interface IForgotPasswordDto {
  email?: string | undefined;
}

export class GoogleAuthRequest implements IGoogleAuthRequest {
  token?: string | undefined;

  constructor(data?: IGoogleAuthRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.token = _data["token"];
    }
  }

  static fromJS(data: any): GoogleAuthRequest {
    data = typeof data === "object" ? data : {};
    let result = new GoogleAuthRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["token"] = this.token;
    return data;
  }
}

export interface IGoogleAuthRequest {
  token?: string | undefined;
}

export class LoginDto implements ILoginDto {
  userName!: string;
  password!: string;

  constructor(data?: ILoginDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): LoginDto {
    data = typeof data === "object" ? data : {};
    let result = new LoginDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userName"] = this.userName;
    data["password"] = this.password;
    return data;
  }
}

export interface ILoginDto {
  userName: string;
  password: string;
}

export class NewUserDto implements INewUserDto {
  userName!: string;
  email?: string | undefined;
  token!: string;

  constructor(data?: INewUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data["userName"];
      this.email = _data["email"];
      this.token = _data["token"];
    }
  }

  static fromJS(data: any): NewUserDto {
    data = typeof data === "object" ? data : {};
    let result = new NewUserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["userName"] = this.userName;
    data["email"] = this.email;
    data["token"] = this.token;
    return data;
  }
}

export interface INewUserDto {
  userName: string;
  email?: string | undefined;
  token: string;
}

export class RegisterDto implements IRegisterDto {
  username!: string;
  email!: string;
  password?: string | undefined;

  constructor(data?: IRegisterDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.email = _data["email"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): RegisterDto {
    data = typeof data === "object" ? data : {};
    let result = new RegisterDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["username"] = this.username;
    data["email"] = this.email;
    data["password"] = this.password;
    return data;
  }
}

export interface IRegisterDto {
  username: string;
  email: string;
  password?: string | undefined;
}

export class ResetPasswordDto implements IResetPasswordDto {
  email?: string | undefined;
  token?: string | undefined;
  newPassword?: string | undefined;

  constructor(data?: IResetPasswordDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data["email"];
      this.token = _data["token"];
      this.newPassword = _data["newPassword"];
    }
  }

  static fromJS(data: any): ResetPasswordDto {
    data = typeof data === "object" ? data : {};
    let result = new ResetPasswordDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["email"] = this.email;
    data["token"] = this.token;
    data["newPassword"] = this.newPassword;
    return data;
  }
}

export interface IResetPasswordDto {
  email?: string | undefined;
  token?: string | undefined;
  newPassword?: string | undefined;
}

export class UpdateCommentRequestDto implements IUpdateCommentRequestDto {
  title!: string;
  content!: string;

  constructor(data?: IUpdateCommentRequestDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.title = _data["title"];
      this.content = _data["content"];
    }
  }

  static fromJS(data: any): UpdateCommentRequestDto {
    data = typeof data === "object" ? data : {};
    let result = new UpdateCommentRequestDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["title"] = this.title;
    data["content"] = this.content;
    return data;
  }
}

export interface IUpdateCommentRequestDto {
  title: string;
  content: string;
}

export class UpdateHoldingRequest implements IUpdateHoldingRequest {
  holdingId?: number;
  bookCost?: number;
  units?: number;

  constructor(data?: IUpdateHoldingRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.holdingId = _data["holdingId"];
      this.bookCost = _data["bookCost"];
      this.units = _data["units"];
    }
  }

  static fromJS(data: any): UpdateHoldingRequest {
    data = typeof data === "object" ? data : {};
    let result = new UpdateHoldingRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["holdingId"] = this.holdingId;
    data["bookCost"] = this.bookCost;
    data["units"] = this.units;
    return data;
  }
}

export interface IUpdateHoldingRequest {
  holdingId?: number;
  bookCost?: number;
  units?: number;
}

export class SwaggerResponse<TResult> {
  status: number;
  headers: { [key: string]: any };
  result: TResult;

  constructor(
    status: number,
    headers: { [key: string]: any },
    result: TResult
  ) {
    this.status = status;
    this.headers = headers;
    this.result = result;
  }
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  throw new ApiException(message, status, response, headers, result);
}

function isAxiosError(obj: any): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}
